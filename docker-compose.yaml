services:
  database:
    networks:
      - flow_network
    container_name: postgres_db
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
  backend:
    networks:
      - flow_network
    container_name: flow_backend
    build: 
      context: .
      dockerfile: app/main/Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - IP=${IP}
      - ENVIRONMENT=${ENVIRONMENT}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - PORT=${PORT}
      - EXPIRATION_TIME=${EXPIRATION_TIME}
      - COOKIE_SECURE=${COOKIE_SECURE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - BASE_URL=${BASE_URL}
      - VK_CLIENT_ID=${VK_CLIENT_ID}
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      - database
    volumes:
      - ./static:/app/static
    restart: on-failure

  auth:
    networks:
      - flow_network
    container_name: auth
    build:
      context: .
      dockerfile: app/auth/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
    # ports:
    #   - "8010:8010"
    depends_on:
      - database
    restart: on-failure

  
  chat:
    networks:
      - flow_network
    container_name: chat
    build:
      context: .
      dockerfile: app/chat/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
    # таким образом, контейнер доступен только внутри сети
    # ports:
    #   - "8012:8012"
    depends_on:
      - database
    restart: on-failure


  websocket_chat:
    networks:
      - flow_network
    container_name: websocket
    build:
      context: .
      dockerfile: app/websocket/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - JWT_SECRET=${JWT_SECRET}
      - EXPIRATION_TIME=${EXPIRATION_TIME}
      - COOKIE_SECURE=${COOKIE_SECURE}
    ports:
      - "8013:8013"
    depends_on:
      - database
    restart: on-failure


  feed:
    networks:
      - flow_network
    container_name: feed
    build:
      context: .
      dockerfile: app/feed/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
    # ports:
    #   - "8011:8011"
    depends_on:
      - database
    restart: on-failure

  
  prometheus:
    networks:
      - flow_network
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "8090:9090"
  
  node_exporter:
    networks:
      - flow_network
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    hostname: node_exporter
    ports:
      - "8091:9100"
    depends_on:
      - prometheus
  
  grafana:
    networks:
      - flow_network
    image: grafana/grafana-enterprise
    volumes:
      - grafana_storage:/var/lib/grafana/
      - grafana_storage:/etc/grafana/provisioning/
      - grafana_storage:/etc/grafana/dashboards
    user: "${UID}"
    ports:
      - "8092:3000"
    depends_on:
      - prometheus

networks:
  flow_network:
    driver: bridge

volumes:
  db_data:
  grafana_storage:
