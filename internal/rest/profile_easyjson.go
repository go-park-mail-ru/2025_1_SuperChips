// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package rest

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson521a5691DecodeGithubComGoParkMailRu20251SuperChipsInternalRest(in *jlexer.Lexer, out *passwordChange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_password":
			out.OldPassword = string(in.String())
		case "new_password":
			out.NewPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20251SuperChipsInternalRest(out *jwriter.Writer, in passwordChange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_password\":"
		out.RawString(prefix[1:])
		out.String(string(in.OldPassword))
	}
	{
		const prefix string = ",\"new_password\":"
		out.RawString(prefix)
		out.String(string(in.NewPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v passwordChange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20251SuperChipsInternalRest(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v passwordChange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20251SuperChipsInternalRest(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *passwordChange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20251SuperChipsInternalRest(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *passwordChange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20251SuperChipsInternalRest(l, v)
}
func easyjson521a5691DecodeGithubComGoParkMailRu20251SuperChipsInternalRest1(in *jlexer.Lexer, out *UserUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			if in.IsNull() {
				in.Skip()
				out.Username = nil
			} else {
				if out.Username == nil {
					out.Username = new(string)
				}
				*out.Username = string(in.String())
			}
		case "email":
			if in.IsNull() {
				in.Skip()
				out.Email = nil
			} else {
				if out.Email == nil {
					out.Email = new(string)
				}
				*out.Email = string(in.String())
			}
		case "birthday":
			if in.IsNull() {
				in.Skip()
				out.Birthday = nil
			} else {
				if out.Birthday == nil {
					out.Birthday = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Birthday).UnmarshalJSON(data))
				}
			}
		case "about":
			if in.IsNull() {
				in.Skip()
				out.About = nil
			} else {
				if out.About == nil {
					out.About = new(string)
				}
				*out.About = string(in.String())
			}
		case "public_name":
			if in.IsNull() {
				in.Skip()
				out.PublicName = nil
			} else {
				if out.PublicName == nil {
					out.PublicName = new(string)
				}
				*out.PublicName = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson521a5691EncodeGithubComGoParkMailRu20251SuperChipsInternalRest1(out *jwriter.Writer, in UserUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		if in.Username == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Username))
		}
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		if in.Email == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Email))
		}
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		if in.Birthday == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Birthday).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		if in.About == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.About))
		}
	}
	{
		const prefix string = ",\"public_name\":"
		out.RawString(prefix)
		if in.PublicName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PublicName))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson521a5691EncodeGithubComGoParkMailRu20251SuperChipsInternalRest1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson521a5691EncodeGithubComGoParkMailRu20251SuperChipsInternalRest1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson521a5691DecodeGithubComGoParkMailRu20251SuperChipsInternalRest1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson521a5691DecodeGithubComGoParkMailRu20251SuperChipsInternalRest1(l, v)
}
