// Code generated by MockGen. DO NOT EDIT.
// Source: ./profile/service.go
//
// Generated by this command:
//
//	mockgen -source=./profile/service.go -destination=./mocks/profile/service.go
//

// Package mock_profile is a generated GoMock package.
package mock_profile

import (
	reflect "reflect"

	domain "github.com/go-park-mail-ru/2025_1_SuperChips/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockProfileRepository is a mock of ProfileRepository interface.
type MockProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProfileRepositoryMockRecorder
	isgomock struct{}
}

// MockProfileRepositoryMockRecorder is the mock recorder for MockProfileRepository.
type MockProfileRepositoryMockRecorder struct {
	mock *MockProfileRepository
}

// NewMockProfileRepository creates a new mock instance.
func NewMockProfileRepository(ctrl *gomock.Controller) *MockProfileRepository {
	mock := &MockProfileRepository{ctrl: ctrl}
	mock.recorder = &MockProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileRepository) EXPECT() *MockProfileRepositoryMockRecorder {
	return m.recorder
}

// GetHashedPassword mocks base method.
func (m *MockProfileRepository) GetHashedPassword(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashedPassword", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashedPassword indicates an expected call of GetHashedPassword.
func (mr *MockProfileRepositoryMockRecorder) GetHashedPassword(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashedPassword", reflect.TypeOf((*MockProfileRepository)(nil).GetHashedPassword), email)
}

// GetUserPublicInfoByEmail mocks base method.
func (m *MockProfileRepository) GetUserPublicInfoByEmail(email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPublicInfoByEmail", email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPublicInfoByEmail indicates an expected call of GetUserPublicInfoByEmail.
func (mr *MockProfileRepositoryMockRecorder) GetUserPublicInfoByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPublicInfoByEmail", reflect.TypeOf((*MockProfileRepository)(nil).GetUserPublicInfoByEmail), email)
}

// GetUserPublicInfoByUsername mocks base method.
func (m *MockProfileRepository) GetUserPublicInfoByUsername(username string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPublicInfoByUsername", username)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPublicInfoByUsername indicates an expected call of GetUserPublicInfoByUsername.
func (mr *MockProfileRepositoryMockRecorder) GetUserPublicInfoByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPublicInfoByUsername", reflect.TypeOf((*MockProfileRepository)(nil).GetUserPublicInfoByUsername), username)
}

// SaveUserAvatar mocks base method.
func (m *MockProfileRepository) SaveUserAvatar(email, avatar string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserAvatar", email, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserAvatar indicates an expected call of SaveUserAvatar.
func (mr *MockProfileRepositoryMockRecorder) SaveUserAvatar(email, avatar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserAvatar", reflect.TypeOf((*MockProfileRepository)(nil).SaveUserAvatar), email, avatar)
}

// SetNewPassword mocks base method.
func (m *MockProfileRepository) SetNewPassword(email, newPassword string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewPassword", email, newPassword)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNewPassword indicates an expected call of SetNewPassword.
func (mr *MockProfileRepositoryMockRecorder) SetNewPassword(email, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewPassword", reflect.TypeOf((*MockProfileRepository)(nil).SetNewPassword), email, newPassword)
}

// UpdateUserData mocks base method.
func (m *MockProfileRepository) UpdateUserData(user domain.User, oldEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserData", user, oldEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserData indicates an expected call of UpdateUserData.
func (mr *MockProfileRepositoryMockRecorder) UpdateUserData(user, oldEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserData", reflect.TypeOf((*MockProfileRepository)(nil).UpdateUserData), user, oldEmail)
}
