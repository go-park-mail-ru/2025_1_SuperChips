// Code generated by MockGen. DO NOT EDIT.
// Source: ./user/service.go
//
// Generated by this command:
//
//	mockgen -source=./user/service.go -destination=./mocks/user/service.go
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	domain "github.com/go-park-mail-ru/2025_1_SuperChips/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepository) AddUser(user domain.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepositoryMockRecorder) AddUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepository)(nil).AddUser), user)
}

// GetHash mocks base method.
func (m *MockUserRepository) GetHash(email, password string) (uint64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", email, password)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHash indicates an expected call of GetHash.
func (mr *MockUserRepositoryMockRecorder) GetHash(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockUserRepository)(nil).GetHash), email, password)
}

// GetUserId mocks base method.
func (m *MockUserRepository) GetUserId(email string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", email)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockUserRepositoryMockRecorder) GetUserId(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockUserRepository)(nil).GetUserId), email)
}

// GetUserPrivateInfo mocks base method.
func (m *MockUserRepository) GetUserPrivateInfo(email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPrivateInfo", email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrivateInfo indicates an expected call of GetUserPrivateInfo.
func (mr *MockUserRepositoryMockRecorder) GetUserPrivateInfo(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrivateInfo", reflect.TypeOf((*MockUserRepository)(nil).GetUserPrivateInfo), email)
}

// GetUserPublicInfo mocks base method.
func (m *MockUserRepository) GetUserPublicInfo(email string) (domain.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPublicInfo", email)
	ret0, _ := ret[0].(domain.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPublicInfo indicates an expected call of GetUserPublicInfo.
func (mr *MockUserRepositoryMockRecorder) GetUserPublicInfo(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPublicInfo", reflect.TypeOf((*MockUserRepository)(nil).GetUserPublicInfo), email)
}
