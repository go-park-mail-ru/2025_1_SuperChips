// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/rest/profile.go
//
// Generated by this command:
//
//	mockgen -source=./internal/rest/profile.go -destination=./mocks/rest/profile.go
//

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	reflect "reflect"

	domain "github.com/go-park-mail-ru/2025_1_SuperChips/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockProfileService is a mock of ProfileService interface.
type MockProfileService struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceMockRecorder
	isgomock struct{}
}

// MockProfileServiceMockRecorder is the mock recorder for MockProfileService.
type MockProfileServiceMockRecorder struct {
	mock *MockProfileService
}

// NewMockProfileService creates a new mock instance.
func NewMockProfileService(ctrl *gomock.Controller) *MockProfileService {
	mock := &MockProfileService{ctrl: ctrl}
	mock.recorder = &MockProfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileService) EXPECT() *MockProfileServiceMockRecorder {
	return m.recorder
}

// ChangeUserPassword mocks base method.
func (m *MockProfileService) ChangeUserPassword(email, oldPassword, newPassword string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPassword", email, oldPassword, newPassword)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockProfileServiceMockRecorder) ChangeUserPassword(email, oldPassword, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockProfileService)(nil).ChangeUserPassword), email, oldPassword, newPassword)
}

// GetUserPublicInfoByEmail mocks base method.
func (m *MockProfileService) GetUserPublicInfoByEmail(email string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPublicInfoByEmail", email)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPublicInfoByEmail indicates an expected call of GetUserPublicInfoByEmail.
func (mr *MockProfileServiceMockRecorder) GetUserPublicInfoByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPublicInfoByEmail", reflect.TypeOf((*MockProfileService)(nil).GetUserPublicInfoByEmail), email)
}

// GetUserPublicInfoByUsername mocks base method.
func (m *MockProfileService) GetUserPublicInfoByUsername(username string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPublicInfoByUsername", username)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPublicInfoByUsername indicates an expected call of GetUserPublicInfoByUsername.
func (mr *MockProfileServiceMockRecorder) GetUserPublicInfoByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPublicInfoByUsername", reflect.TypeOf((*MockProfileService)(nil).GetUserPublicInfoByUsername), username)
}

// SaveUserAvatar mocks base method.
func (m *MockProfileService) SaveUserAvatar(email, avatar string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserAvatar", email, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserAvatar indicates an expected call of SaveUserAvatar.
func (mr *MockProfileServiceMockRecorder) SaveUserAvatar(email, avatar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserAvatar", reflect.TypeOf((*MockProfileService)(nil).SaveUserAvatar), email, avatar)
}

// UpdateUserData mocks base method.
func (m *MockProfileService) UpdateUserData(user domain.User, oldEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserData", user, oldEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserData indicates an expected call of UpdateUserData.
func (mr *MockProfileServiceMockRecorder) UpdateUserData(user, oldEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserData", reflect.TypeOf((*MockProfileService)(nil).UpdateUserData), user, oldEmail)
}
