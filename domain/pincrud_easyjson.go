// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson36700d57DecodeGithubComGoParkMailRu20251SuperChipsDomain(in *jlexer.Lexer, out *PinDataUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "flow_id":
			if in.IsNull() {
				in.Skip()
				out.FlowID = nil
			} else {
				if out.FlowID == nil {
					out.FlowID = new(uint64)
				}
				*out.FlowID = uint64(in.Uint64())
			}
		case "header":
			if in.IsNull() {
				in.Skip()
				out.Header = nil
			} else {
				if out.Header == nil {
					out.Header = new(string)
				}
				*out.Header = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "is_private":
			if in.IsNull() {
				in.Skip()
				out.IsPrivate = nil
			} else {
				if out.IsPrivate == nil {
					out.IsPrivate = new(bool)
				}
				*out.IsPrivate = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson36700d57EncodeGithubComGoParkMailRu20251SuperChipsDomain(out *jwriter.Writer, in PinDataUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FlowID != nil {
		const prefix string = ",\"flow_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(*in.FlowID))
	}
	if in.Header != nil {
		const prefix string = ",\"header\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Header))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.IsPrivate != nil {
		const prefix string = ",\"is_private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.IsPrivate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PinDataUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson36700d57EncodeGithubComGoParkMailRu20251SuperChipsDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PinDataUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson36700d57EncodeGithubComGoParkMailRu20251SuperChipsDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PinDataUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson36700d57DecodeGithubComGoParkMailRu20251SuperChipsDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PinDataUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson36700d57DecodeGithubComGoParkMailRu20251SuperChipsDomain(l, v)
}
