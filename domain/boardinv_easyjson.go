// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBe2af181DecodeGithubComGoParkMailRu20251SuperChipsDomain(in *jlexer.Lexer, out *LinkParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "link":
			out.Link = string(in.String())
		case "names":
			if in.IsNull() {
				in.Skip()
				out.Names = nil
			} else {
				if out.Names == nil {
					out.Names = new([]string)
				}
				if in.IsNull() {
					in.Skip()
					*out.Names = nil
				} else {
					in.Delim('[')
					if *out.Names == nil {
						if !in.IsDelim(']') {
							*out.Names = make([]string, 0, 4)
						} else {
							*out.Names = []string{}
						}
					} else {
						*out.Names = (*out.Names)[:0]
					}
					for !in.IsDelim(']') {
						var v1 string
						v1 = string(in.String())
						*out.Names = append(*out.Names, v1)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "time_limit":
			if in.IsNull() {
				in.Skip()
				out.TimeLimit = nil
			} else {
				if out.TimeLimit == nil {
					out.TimeLimit = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TimeLimit).UnmarshalJSON(data))
				}
			}
		case "usage_limit":
			if in.IsNull() {
				in.Skip()
				out.UsageLimit = nil
			} else {
				if out.UsageLimit == nil {
					out.UsageLimit = new(int64)
				}
				*out.UsageLimit = int64(in.Int64())
			}
		case "usage_count":
			if in.IsNull() {
				in.Skip()
				out.UsageCount = nil
			} else {
				if out.UsageCount == nil {
					out.UsageCount = new(int64)
				}
				*out.UsageCount = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBe2af181EncodeGithubComGoParkMailRu20251SuperChipsDomain(out *jwriter.Writer, in LinkParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix[1:])
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"names\":"
		out.RawString(prefix)
		if in.Names == nil {
			out.RawString("null")
		} else {
			if *in.Names == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v2, v3 := range *in.Names {
					if v2 > 0 {
						out.RawByte(',')
					}
					out.String(string(v3))
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"time_limit\":"
		out.RawString(prefix)
		if in.TimeLimit == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TimeLimit).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"usage_limit\":"
		out.RawString(prefix)
		if in.UsageLimit == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.UsageLimit))
		}
	}
	{
		const prefix string = ",\"usage_count\":"
		out.RawString(prefix)
		if in.UsageCount == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.UsageCount))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LinkParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBe2af181EncodeGithubComGoParkMailRu20251SuperChipsDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LinkParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBe2af181EncodeGithubComGoParkMailRu20251SuperChipsDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LinkParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBe2af181DecodeGithubComGoParkMailRu20251SuperChipsDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LinkParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBe2af181DecodeGithubComGoParkMailRu20251SuperChipsDomain(l, v)
}
func easyjsonBe2af181DecodeGithubComGoParkMailRu20251SuperChipsDomain1(in *jlexer.Lexer, out *Invitaion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "names":
			if in.IsNull() {
				in.Skip()
				out.Names = nil
			} else {
				if out.Names == nil {
					out.Names = new([]string)
				}
				if in.IsNull() {
					in.Skip()
					*out.Names = nil
				} else {
					in.Delim('[')
					if *out.Names == nil {
						if !in.IsDelim(']') {
							*out.Names = make([]string, 0, 4)
						} else {
							*out.Names = []string{}
						}
					} else {
						*out.Names = (*out.Names)[:0]
					}
					for !in.IsDelim(']') {
						var v4 string
						v4 = string(in.String())
						*out.Names = append(*out.Names, v4)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "time_limit":
			if in.IsNull() {
				in.Skip()
				out.TimeLimit = nil
			} else {
				if out.TimeLimit == nil {
					out.TimeLimit = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TimeLimit).UnmarshalJSON(data))
				}
			}
		case "usage_limit":
			if in.IsNull() {
				in.Skip()
				out.UsageLimit = nil
			} else {
				if out.UsageLimit == nil {
					out.UsageLimit = new(int)
				}
				*out.UsageLimit = int(in.Int())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBe2af181EncodeGithubComGoParkMailRu20251SuperChipsDomain1(out *jwriter.Writer, in Invitaion) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Names != nil {
		const prefix string = ",\"names\":"
		first = false
		out.RawString(prefix[1:])
		if *in.Names == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range *in.Names {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.TimeLimit != nil {
		const prefix string = ",\"time_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.TimeLimit).MarshalJSON())
	}
	if in.UsageLimit != nil {
		const prefix string = ",\"usage_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.UsageLimit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Invitaion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBe2af181EncodeGithubComGoParkMailRu20251SuperChipsDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Invitaion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBe2af181EncodeGithubComGoParkMailRu20251SuperChipsDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Invitaion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBe2af181DecodeGithubComGoParkMailRu20251SuperChipsDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Invitaion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBe2af181DecodeGithubComGoParkMailRu20251SuperChipsDomain1(l, v)
}
