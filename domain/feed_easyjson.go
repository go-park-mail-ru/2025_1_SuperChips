// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD77e0694DecodeGithubComGoParkMailRu20251SuperChipsDomain(in *jlexer.Lexer, out *PinData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "flow_id":
			out.FlowID = uint64(in.Uint64())
		case "header":
			out.Header = string(in.String())
		case "author_id":
			out.AuthorID = uint64(in.Uint64())
		case "author_username":
			out.AuthorUsername = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "media_url":
			out.MediaURL = string(in.String())
		case "is_private":
			out.IsPrivate = bool(in.Bool())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "is_liked":
			out.IsLiked = bool(in.Bool())
		case "like_count":
			out.LikeCount = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD77e0694EncodeGithubComGoParkMailRu20251SuperChipsDomain(out *jwriter.Writer, in PinData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FlowID != 0 {
		const prefix string = ",\"flow_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.FlowID))
	}
	if in.Header != "" {
		const prefix string = ",\"header\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Header))
	}
	if in.AuthorID != 0 {
		const prefix string = ",\"author_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.AuthorID))
	}
	{
		const prefix string = ",\"author_username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthorUsername))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.MediaURL != "" {
		const prefix string = ",\"media_url\":"
		out.RawString(prefix)
		out.String(string(in.MediaURL))
	}
	{
		const prefix string = ",\"is_private\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPrivate))
	}
	if in.CreatedAt != "" {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	if in.UpdatedAt != "" {
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"is_liked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLiked))
	}
	{
		const prefix string = ",\"like_count\":"
		out.RawString(prefix)
		out.Int(int(in.LikeCount))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PinData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD77e0694EncodeGithubComGoParkMailRu20251SuperChipsDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PinData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD77e0694EncodeGithubComGoParkMailRu20251SuperChipsDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PinData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD77e0694DecodeGithubComGoParkMailRu20251SuperChipsDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PinData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD77e0694DecodeGithubComGoParkMailRu20251SuperChipsDomain(l, v)
}
