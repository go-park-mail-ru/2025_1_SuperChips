// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "description": "Tries to log the user in",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Log in user",
                "parameters": [
                    {
                        "example": "\"user@mail.ru\"",
                        "description": "user email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"abcdefgh1234\"",
                        "description": "user password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Logouts user",
                "produces": [
                    "application/json"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "logged out",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "description": "Tries to register the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "example": "\"admin@mail.ru\"",
                        "description": "user email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"mailrudabest\"",
                        "description": "user username",
                        "name": "username",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"1990-12-31T23:59:60Z\"",
                        "description": "user date of birth RFC",
                        "name": "birthday",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"unbreakable_password\"",
                        "description": "user password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/boards/{board_id}": {
            "get": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Retrieves board information with access control",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "boards"
                ],
                "summary": "Get board details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID to retrieve",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/rest.ServerResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/domain.Board"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid board ID",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - private board",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Board not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Updates board name and privacy settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "boards"
                ],
                "summary": "Update board details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID to update",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "update data: new name and is_private",
                        "name": "updateData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board updated successfully",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not board owner",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Board not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Deletes a board by ID for authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "boards"
                ],
                "summary": "Delete a board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the board to delete",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid board ID",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not board owner",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Board not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/boards/{board_id}/coauthoring": {
            "delete": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Refuse coauthoring of the board (user must be coauthor of the board)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board sharing [coauthor]"
                ],
                "summary": "Refuse coauthoring",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the board",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User has stopped being a coauthor",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - access denied",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/boards/{board_id}/coauthors": {
            "get": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Get coauthors of the board (user must be author of the board)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board sharing [author]"
                ],
                "summary": "Get coauthors",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the board",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of coauthors has been successfully received",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/rest.ServerResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - access denied",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Remove coauthor from the board (user must be author of the board)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board sharing [author]"
                ],
                "summary": "Remove coauthor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the board",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Username of coauthor",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Coauthor has been successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - access denied",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Username doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/boards/{board_id}/flows": {
            "get": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Retrieves flows in a board with pagination for authenticated users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "boards"
                ],
                "summary": "Get board flows with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the board to retrieve flows from",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (0-based index)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of flows in the board",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/rest.ServerResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/domain.PinData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - access denied",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Board not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/boards/{board_id}/flows/{id}": {
            "get": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Get flow from a board for authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "boards"
                ],
                "summary": "Get flow from board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Flow ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Flow has been obtained successfully",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not board owner",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Board or flow not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Removes a flow from a board for authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "boards"
                ],
                "summary": "Remove flow from board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Flow ID to remove",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Flow removed successfully",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not board owner",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Board or flow not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/boards/{board_id}/invites": {
            "get": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Get invitation links to the board with ID with parameters (user must be author of the board)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board sharing [author]"
                ],
                "summary": "Get links",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the board",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Link list has been successfully fetched",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/rest.ServerResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "links": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/definitions/domain.LinkParams"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - access denied",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Board or links not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Create invitation link to the board with parameters (person, time limit, usage limit) (user must be author of the board)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board sharing [author]"
                ],
                "summary": "Create link",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the board",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Usernames for personal invitation",
                        "name": "names",
                        "in": "body",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "Time limit for link activity",
                        "name": "time_limit",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Usage limit",
                        "name": "usage_limit",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Link has been successfully created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/rest.ServerResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "link": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "207": {
                        "description": "Link has been successfully created for valid names; Invalid usernames are returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/rest.ServerResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "invalid": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "link": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - access denied",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Link not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/boards/{board_id}/invites/{link}": {
            "delete": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Delete invitation link to the board (user must be author of the board)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board sharing [author]"
                ],
                "summary": "Delete link",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the board",
                        "name": "board_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Invitation link",
                        "name": "link",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Link has been successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - access denied",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/boards/{id}/flows": {
            "post": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Adds a flow to a board for authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "boards"
                ],
                "summary": "Add flow to board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Flow added successfully",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not board owner",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Board or flow not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/boards/{username}": {
            "post": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Creates a new board for the specified user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "boards"
                ],
                "summary": "Create a new board",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the board owner",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Board details",
                        "name": "board",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Board"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board created successfully",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "409": {
                        "description": "Board already exists",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/feed": {
            "get": {
                "description": "Returns a pageSized number of pins",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Pins",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "requested page",
                        "name": "page",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "page not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/flows": {
            "get": {
                "description": "Returns Pin Data",
                "produces": [
                    "application/json"
                ],
                "summary": "Get public pin by ID or private pin if user its author",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "requested pin",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid query parameter [id]",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "access to private pin is forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no pin with given id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "untracked error: ${error}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Returns JSON with result description",
                "produces": [
                    "application/json"
                ],
                "summary": "Update certain pin's fields by ID if user is its author",
                "parameters": [
                    {
                        "description": "pin ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "text header",
                        "name": "header",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "text description",
                        "name": "description",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "privacy setting",
                        "name": "is_private",
                        "in": "body",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "no fields to update",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "user is not authorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "access to private pin is forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no pin with given id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "untracked error: ${error}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Returns JSON with result description",
                "produces": [
                    "application/json"
                ],
                "summary": "Create pin if user if user is authorized",
                "parameters": [
                    {
                        "type": "file",
                        "description": "pin image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "text header",
                        "name": "header",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "text description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "privacy setting",
                        "name": "is_private",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid image extension",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "user is not authorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "untracked error: ${error}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Returns JSON with result description",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete pin by ID if user is its author",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "pin to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid query parameter [id]",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "access to private pin is forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "no pin with given id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "untracked error: ${error}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/join/{link}": {
            "post": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Join the board via invitation link as co-author; link mustn't be expired and, if link is private, user must be in group",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board sharing [coauthor]"
                ],
                "summary": "Join via link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Link",
                        "name": "link",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User has successfully become a coauthor of the board",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - access denied",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "Link not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "409": {
                        "description": "User is already coauthor",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/rest.ServerResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "board_id": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "410": {
                        "description": "Link's time or usage limit has expired",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/like": {
            "post": {
                "description": "Leaves a like on a flow or deletes the like",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Leave a like on a flow",
                "parameters": [
                    {
                        "example": 456,
                        "description": "flow id",
                        "name": "pin_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/profile/boards": {
            "get": {
                "security": [
                    {
                        "jwt_auth": []
                    }
                ],
                "description": "Retrieves all boards (public and private) for authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "boards"
                ],
                "summary": "Get all user boards",
                "responses": {
                    "200": {
                        "description": "User's boards list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/rest.ServerResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/domain.Board"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/profile/followers": {
            "get": {
                "description": "Returns a pageSized number of user's followers",
                "produces": [
                    "application/json"
                ],
                "summary": "Get user's followers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "requested page",
                        "name": "page",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "requested size",
                        "name": "page",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "page not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/profile/following": {
            "get": {
                "description": "Returns a pageSized number of user's subscriptions",
                "produces": [
                    "application/json"
                ],
                "summary": "Get user's subscriptions (or who they follow, in other words)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "requested page",
                        "name": "page",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "requested size",
                        "name": "page",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "page not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/search/boards": {
            "get": {
                "description": "Returns a pageSized number of boards searched for",
                "produces": [
                    "application/json"
                ],
                "summary": "Searches for boards",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "requested page",
                        "name": "page",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "requested page size",
                        "name": "size",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"?query=kittens\"",
                        "description": "search query",
                        "name": "query",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "page not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/search/pins": {
            "get": {
                "description": "Returns a pageSized number of pins searched for",
                "produces": [
                    "application/json"
                ],
                "summary": "Searches for pins",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "requested page",
                        "name": "page",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "requested page size",
                        "name": "size",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"?query=kittens\"",
                        "description": "search query",
                        "name": "query",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "page not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/search/users": {
            "get": {
                "description": "Returns a pageSized number of users searched for",
                "produces": [
                    "application/json"
                ],
                "summary": "Searches for users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "requested page",
                        "name": "page",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "requested page size",
                        "name": "size",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"?query=kittens\"",
                        "description": "search query",
                        "name": "query",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "page not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/subscription": {
            "post": {
                "description": "Tries to subscribe the user to the target user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Subscribe to target user",
                "parameters": [
                    {
                        "example": "\"cool_guy\"",
                        "description": "target user's username",
                        "name": "target_user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Tries to unsubscribe the user from the target user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Unsubscribe from target user",
                "parameters": [
                    {
                        "example": "\"cool_guy\"",
                        "description": "target user's username",
                        "name": "target_user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/user/{username}/boards": {
            "get": {
                "description": "Retrieves public boards for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "boards"
                ],
                "summary": "Get user's public boards",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username to retrieve public boards for",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Public boards list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/rest.ServerResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/domain.Board"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid username",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/rest.ServerResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns server status",
                "produces": [
                    "application/json"
                ],
                "summary": "Check server status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Board": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "integer"
                },
                "author_username": {
                    "type": "string"
                },
                "flow_count": {
                    "type": "integer"
                },
                "gradient": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "is_private": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "preview": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.PinData"
                    }
                }
            }
        },
        "domain.LinkParams": {
            "type": "object",
            "properties": {
                "link": {
                    "type": "string"
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "time_limit": {
                    "type": "string"
                },
                "usage_count": {
                    "type": "integer"
                },
                "usage_limit": {
                    "type": "integer"
                }
            }
        },
        "domain.PinData": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "integer"
                },
                "author_username": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "flow_id": {
                    "type": "integer"
                },
                "header": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "is_liked": {
                    "type": "boolean"
                },
                "is_private": {
                    "type": "boolean"
                },
                "like_count": {
                    "type": "integer"
                },
                "media_url": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "rest.ServerResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "description": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "flow API",
	Description:      "API for Flow.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
